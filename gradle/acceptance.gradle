/**
 * Acceptance tasks
 *
 * Only used to run from a packaged Ontrack application against a running server.
 *
 * For local development testing, running the following tasks is enough:
 *
 * ./gradlew build localAcceptanceTest
 */


import net.nemerosa.ontrack.gradle.*

/**
 * CI environment
 */

task ciStart(type: ComposeUp) {
    machine = project.properties.ciMachine
    dir = file("${rootDir}/gradle/compose")
    projectFiles = ['docker-compose.yml', 'docker-compose-ci.yml']
    projectName = 'ci'
    forceRecreate = true
}

task ciStop(type: ComposeStop) {
    machine = project.properties.ciMachine
    dir = file("${rootDir}/gradle/compose")
    projectFiles = ['docker-compose.yml', 'docker-compose-ci.yml']
    projectName = 'ci'
    remove = true
    logs = [
            ontrack: 'build/ci-ontrack.log',
    ]
}

task ciAcceptanceTest(type: RemoteAcceptanceTest) {
    acceptanceUrl = { "https://${ciStart.host}:${ciStart.getPublishedPort('ontrack', 443)}" }
    disableSsl = true
    acceptanceImplicitWait = 30
    dependsOn ciStart
    finalizedBy ciStop
}

/**
 * Digital Ocean environment
 */

task doSetup(type: DOSetup) {
    doFirst {
        // Checks the token
        if (!digitalOceanAccessToken) {
            throw new GradleException("Missing digitalOceanAccessToken parameter")
        }
        // Checks the version
        if (!ontrackVersion) {
            throw new GradleException("Missing ontrackVersion parameter")
        }
    }
    removeFirst = true
    apiToken = digitalOceanAccessToken
    dropletName = "ontrack-acceptance-${ontrackVersion}"
    region = project.properties.acceptanceRegion
    size = '1gb'
}

task doTeardown(type: Exec) {
    executable 'docker-machine'
    args = ['rm', '--force', "ontrack-acceptance-${ontrackVersion}"]
    mustRunAfter 'doStop'
}

task doEnv {
    mustRunAfter doSetup
    doFirst {
        project.exec {
            executable 'docker-machine'
            args = ['ssh', "ontrack-acceptance-${ontrackVersion}", 'mkdir -p /var/ontrack']
        }
        project.exec {
            executable 'docker-machine'
            args = ['scp', '-r', 'gradle/compose/ci/ontrack', "ontrack-acceptance-${ontrackVersion}:/var/ontrack/conf"]
        }
    }
}

task doStart(type: ComposeUp) {
    machine = "ontrack-acceptance-${ontrackVersion}"
    dir = file("${rootDir}/gradle/compose")
    projectFiles = ['docker-compose.yml', 'docker-compose-do.yml']
    projectName = 'do'
    forceRecreate = true
    environment = [
            ONTRACK_VERSION: ontrackVersion,
            JAVA_OPTIONS: '-Xmx256m',
    ]
    mustRunAfter doEnv
}

task doStop(type: ComposeStop) {
    machine = "ontrack-acceptance-${ontrackVersion}"
    dir = file("${rootDir}/gradle/compose")
    projectFiles = ['docker-compose.yml', 'docker-compose-ci.yml']
    projectName = 'do'
    remove = true
    environment = [ONTRACK_VERSION: ontrackVersion]
    logs = [
            ontrack: 'ci-ontrack.log',
    ]
}

task doAcceptanceTest(type: RemoteAcceptanceTest) {
    acceptanceUrl = { "https://${doSetup.ip}" }
    acceptanceTimeout = 300
    acceptanceImplicitWait = 30
    disableSsl = true
    dependsOn doSetup
    dependsOn doEnv
    dependsOn doStart
    finalizedBy doStop
    finalizedBy doTeardown
}
